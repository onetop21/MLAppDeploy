name: Docker Image CI

on:
  push:
    # branches: [ dev ]
    branches: [ master, dev ]
    # Publish `v1.2.3` tags as releases.
    tags:
    - v*
  pull_request:
    branches: [ dev ]

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: api-server
  
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Build the Docker image
      run: docker build . --file scripts/Dockerfile_CI --tag $IMAGE_NAME
      
    - name: Log into registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin 
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin
        
        cat $HOME/.docker/config.json

    - name: Push image
      run: |
        GITHUB_IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
        DOCKERHUB_IMAGE_ID=docker.io/${{ github.actor }}/mlad-$IMAGE_NAME

        # Change all uppercase to lowercase
        GITHUB_IMAGE_ID=$(echo $GITHUB_IMAGE_ID | tr '[A-Z]' '[a-z]')
        DOCKERHUB_IMAGE_ID=$(echo $DOCKERHUB_IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        
        # Use Docker `latest` tag convention
        [ "$VERSION" == "dev" ] && VERSION=latest
        
        echo GITHUB_IMAGE_ID=$GITHUB_IMAGE_ID
        echo DOCKERHUB_IMAGE_ID=$DOCKERHUB_IMAGE_ID
        echo VERSION=$VERSION
        
        docker tag $IMAGE_NAME $GITHUB_IMAGE_ID:$VERSION
        docker images
        docker push $GITHUB_IMAGE_ID:$VERSION
        
        docker tag $IMAGE_NAME $DOCKERHUB_IMAGE_ID:$VERSION
        docker images
        docker push $DOCKERHUB_IMAGE_ID:$VERSION
