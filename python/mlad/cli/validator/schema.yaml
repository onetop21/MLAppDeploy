# Anchor
x-definitions:
  - definition: &metadata
      apiVersion:
        type: string
        regex: "^v[0-9]+$"
        default: v1
        order: 0
      name:
        type: string
        required: true
        regex: "^([a-z]+[a-z0-9\\-]*[a-z0-9]+|[a-z0-9])$"
        empty: false
        order: 1
        description: Project name.
        multiline: True
      version:
        type: string
        regex: "^[0-9]+\\.[0-9]+\\.[0-9]+$"
        default: 0.0.1
        order: 2
        description: Version of project.
      maintainer:
        type: string
        default: ${USER}
        order: 3
        description: Maintainer of project.
      workdir:                    # Describe workspace directory.
        type: string
        default: .
        order: 4
        description: Workspace directory.
  - definition: &workspace
      base:                       # Describe base docker image tag
        type: string
        regex: "^(?:.+/)?([^:]+)(?::.+)?$"
        required: true
        description: Base docker image tag.
      preps:                      # Describe preparations for making envorinment.
        type: list
        description: Preparations for making environment before docker image build.
        schema:
          type: dict
          schema:
            run:
              type: string
              multiline: true
            add:
              type: string
            pip:
              type: string
            apt:
              type: string
            yum:
              type: string
            apk:
              type: string
      ignores:                    # Describe exclude files from project.
        type: list
        description: Files to be excluded from project.
        default:
          - "**/.*"
        schema:                   # Describe script run after copy files.
          type: string
      script:
        type: string
        description: Script to be run after copying files.
      env:                        # Describe environment variables.
        type: dict
        description: Environment variables.
        valuesrules:
          schema:
            type: [string]
        default:
          PYTHONUNBUFFERED: "1"
      command:                    # Describe application to execute
        type: [string, list]
        description: Command to execute application
      args:                       # Describe arguments for execute application
        type: [string, list]
        description: Arguments to execute application.
  - definition: &buildscript
      buildscript:
        type: string
        default: "FROM    python:latest"
        required: true
        description: Describe Dockerfile script directly as a workspace.
      ignores:                    # Describe exclude files from project.
        type: list
        description: Files to be excluded from project.
        default:
          - "**/.*"
        schema:
          type: string
  - definition: &dockerfile
      filePath:
        type: string
        default: 'Dockerfile'
        required: true
        description: Decribe path of Dockerfile as a workspace.
      ignorePath:
        type: string
        description: File that includes the files to be excluded from project.
        default: '.dockerignore'
  - definition: &ingress
      target:
        type: string
        regex: "^([a-z]+[a-z0-9\\-]*[a-z0-9]+|[a-z0-9]):[0-9]+$"
        required: true
        description: Target app and port to expose with ingress. (<APP NAME>:<PORT>)
      path:
        type: string
        description: Ingress path to access apps.
      rewritePath:
        type: boolean
        default: true
        description: Whether to use rewrite path.
  - definition: &component
      image:                      # Describe image to run docker service for run not built image from workspace.
        type: string
        regex: "(?:(?=[^:\/]{4,253})(?!-)[a-zA-Z0-9-]{1,63}(?<!-)(?:\\.(?!-)[a-zA-Z0-9-]{1,63}(?<!-))*(?::[0-9]{1,5})?/)?((?![._-])(?:[a-z0-9._-]*)(?<![._-])(?:/(?![._-])[a-z0-9._-]*(?<![._-]))*)(?::(?![.-])[a-zA-Z0-9_.-]{1,128})?"
        description: Image to run a docker service, not using image built from workspace.
      env:                        # Describe environment variables additionaly.
        type: dict
        description: Additional environment variables.
      ports:                      # Describe expose ports to other services.
        type: list
        schema:
          type: integer
        description: Expose ports to other apps.
      command:                    # Describe command to need overwrite.
        type: [string, list]
        description: Commands to need overwrite.
      args:                       # Describe arguments to need overwrite.
        type: [string, list]
        description: Arguments to need overwrite.
      mounts:
        type: list
        schema:
          type: dict
          schema:
            path:
              type: string
              regex: "^.*(\/[a-zA-Z0-9_-]*)*$"
              required: true
            mountPath:
              type: string
              regex: "^.*(\/[a-zA-Z0-9_-]*)*$"
              required: true
            options:
              type: list
              schema:
                type: string
  - definition: &_app_base
      <<: *component
      constraints:                # Describe placement constraints.
        type: dict
        schema:
          hostname:
            type: string
          label:
            type: dict
        description: Constraints to place the app on nodes.
  - definition: &app
      <<: *_app_base
      restartPolicy: &restartPolicy # Describe restart policy. (never, onFailure, always)
        type: string
        allowed: [never, onFailure, always]
        default: never
        excludes: runSpec
        description: Restart policy for app. (never, onFailure, always)
      scale: &scale               # Describe number of replicas or parallelism
        type: integer
        default: 1
        excludes: runSpec
        description: Number of replicas or parallelism.
      quota:                      # Describe required system resource quota.
        type: dict
        excludes: resources
        schema:
          cpu:
            type: number
          gpu:
            type: integer
          mem:
            type: string
            regex: "^[0-9]+[GMK]?[i]?$"
        description: Required system resource quota.
  - definition: &job
      <<: *app
      restartPolicy:
        <<: *restartPolicy
        allowed: [never, onFailure]
        default: never
        description: Restart policy for job. (never, onFailure)
      scale:
        <<: *scale
        allowed: [1]
  - definition: &service
      <<: *app
      restartPolicy:
        <<: *restartPolicy
        allowed: [always]
        default: always
        description: Restart policy for service. (always)
  - definition: &_advanced_base
      resources:
        type: dict
        excludes: quota
        schema:
          limits:
            type: dict
            schema:
              cpu:
                type: number
              gpu:
                type: integer
              mem:
                type: string
                regex: "^[0-9]+[GMK]?[i]?$"
          requests:
            type: dict
            schema:
              cpu:
                type: number
              gpu:
                type: integer
              mem:
                type: string
                regex: "^[0-9]+[GMK]?[i]?$"
  - definition: &job_advanced
      <<: *_app_base
      <<: *_advanced_base
      runSpec:
        type: dict
        excludes: restartPolicy
        default:
          restartPolicy:
          parallelism:
          completion:
        schema:
          restartPolicy:        # never, onFailure
            type: string
            allowed: [never, onFailure]
            default: never
          parallelism:
            type: integer
            default: 1
          completion:
            type: integer
            default: 1
  - definition: &_advanced
      <<: *_app_base
      <<: *_advanced_base
      runSpec:
        type: dict
        excludes: restartPolicy
        default:
          replicas:
          autoscaler:
            enable:
        schema:
          replicas:               # Describe number to run service instances.
            type: integer
            default: 1
          autoscaler:
            type: dict
            schema:
              enable:
                type: boolean
                default: false
              min:
                type: integer
                default: 1
              max:
                type: integer
                default: 1
              metrics:
                type: list
                schema:
                  type: dict
                  schema:
                    resources:
                      type: string
                      allowed: [cpu]
                      default: cpu
  - definition: &daemon
      <<: *_app_base
      <<: *_advanced_base
      kind:                    # DaemonSet
        type: string
        allowed: ['Daemon']
        required: true
      # runSpec:
      #   type: dict
      #   excludes: restartPolicy
      #   schema:

############################
# MLAppDeploy Project v0.2 #
############################
__root__:
  type: dict
  selector:
    train:
      <<: *metadata
      workspace:
        type: dict
        required: true
        selector:
          workspace: *workspace
          buildscript: *buildscript
          dockerfile: *dockerfile
        order: 10
        description: Workspace specs to build the project.
      app:
        type: dict
        keysrules:
          type: string
          regex: "^([a-z]+[a-z0-9\\-]*[a-z0-9]+|[a-z0-9])$"
        valuesrules:
          type: dict
          selector:
            job: *job
            service: *service
        order: 30
        description: Apps to run.
    deployment:
      <<: *metadata
      workspace:
        type: dict
        required: true
        selector:
          workspace: *workspace
          buildscript: *buildscript
          dockerfile: *dockerfile
        order: 10
        description: Workspace specs to build project.
      ingress:
        type: dict
        required: true
        keysrules:
          type: string
          regex: "^([a-z]+[a-z0-9\\-]*[a-z0-9]+|[a-z0-9])$"
        valuesrules:
          type: dict
          schema: *ingress
        order: 20
        description: Ingress specs to expose apps.
      app:
        type: dict
        keysrules:
          type: string
          regex: "^([a-z]+[a-z0-9\\-]*[a-z0-9]+|[a-z0-9])$"
        valuesrules:
          type: dict
          selector:
            service: *service
        order: 30
        description: Apps to run.
    component:
      <<: *metadata
      workspace:
        type: dict
        required: false
        selector:
          workspace: *workspace
          buildscript: *buildscript
          dockerfile: *dockerfile
        order: 10
        description: Workspace specs to build project.
      app:
        type: dict
        keysrules:
          type: string
          regex: "^([a-z]+[a-z0-9\\-]*[a-z0-9]+|[a-z0-9])$"
        valuesrules:
          type: dict
          selector:
            component: *component
        order: 30
        description: Apps to run.